package com.promanage.service.impl;

import java.io.IOException;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.Objects;

import org.apache.commons.io.FilenameUtils;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.StringUtils;
import org.springframework.web.multipart.MultipartFile;

import com.promanage.common.domain.ResultCode;
import com.promanage.common.enums.DocumentStatus;
import com.promanage.common.exception.BusinessException;
import com.promanage.common.result.PageResult;
import com.promanage.service.dto.request.CreateDocumentRequest;
import com.promanage.service.dto.request.DocumentSearchRequest;
import com.promanage.service.dto.request.DocumentUploadRequest;
import com.promanage.service.dto.request.UpdateDocumentRequest;
import com.promanage.service.dto.response.DocumentDTO;
import com.promanage.service.dto.response.DocumentDownloadInfo;
import com.promanage.service.dto.response.DocumentFolderDTO;
import com.promanage.service.entity.Document;
import com.promanage.service.entity.DocumentVersion;
import com.promanage.service.mapper.DocumentMapper;
import com.promanage.service.service.IDocumentFileService;
import com.promanage.service.service.IDocumentService;

import jakarta.servlet.http.HttpServletResponse;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Service
@RequiredArgsConstructor
public class DocumentServiceImpl implements IDocumentService {

  private final IDocumentFileService documentFileService;
  private final DocumentMapper documentMapper;

  // --- CORE IMPLEMENTATION FOR FILE UPLOAD ---

  @Override
  @Transactional(rollbackFor = Exception.class)
  public DocumentDTO uploadDocument(
      Long projectId, Long uploaderId, DocumentUploadRequest metadata, MultipartFile file) {
    log.info(
        "Attempting to upload document '{}' for project {}", file.getOriginalFilename(), projectId);
    validateFile(file);

    // Adapt the API DTO to the service-layer DTO required by the file service
    DocumentUploadRequest serviceRequest = new DocumentUploadRequest();
    serviceRequest.setProjectId(metadata.getProjectId());
    serviceRequest.setFolderId(metadata.getFolderId());
    serviceRequest.setDescription(metadata.getDescription());
    serviceRequest.setFile(file);

    try {
      // Delegate the core logic to the existing, transaction-safe documentFileService.
      Document document = documentFileService.upload(serviceRequest, uploaderId);
      log.info(
          "Successfully uploaded document '{}', new document ID: {}",
          file.getOriginalFilename(),
          document.getId());
      // Map the resulting entity back to a DTO for the controller.
      return convertToDTO(document);
    } catch (IOException e) {
      log.error(
          "File upload failed for projectId {} and filename {}",
          projectId,
          file.getOriginalFilename(),
          e);
      throw new BusinessException(ResultCode.INTERNAL_SERVER_ERROR, "文件上传处理失败，请联系管理员");
    }
  }

  private void validateFile(MultipartFile file) {
    if (file.isEmpty()) {
      throw new BusinessException(ResultCode.PARAM_ERROR, "上传文件不能为空");
    }
    // Enforce a 50 MB file size limit.
    if (file.getSize() > 50 * 1024 * 1024) {
      throw new BusinessException(ResultCode.PARAM_ERROR, "文件大小不能超过50MB");
    }
    // Sanitize filename to prevent path traversal attacks.
    String filename = StringUtils.cleanPath(Objects.requireNonNull(file.getOriginalFilename()));
    String extension = FilenameUtils.getExtension(filename);

    // Use a whitelist to allow only specific file types.
    List<String> allowedExtensions =
        Arrays.asList(
            "pdf", "doc", "docx", "xls", "xlsx", "ppt", "pptx", "txt", "md", "zip", "rar", "png",
            "jpg", "jpeg", "gif");
    if (extension == null || !allowedExtensions.contains(extension.toLowerCase())) {
      throw new BusinessException(ResultCode.PARAM_ERROR, "不支持的文件类型: " + extension);
    }
  }

  // --- STUB IMPLEMENTATIONS FOR OTHER INTERFACE METHODS ---

  @Override
  public Document getById(Long id, Long userId, boolean incrementView) {
    log.warn("STUB IMPLEMENTATION: getById is not implemented.");
    // TODO: Implement logic to fetch a document by ID with permission checks.
    return null;
  }

  @Override
  public PageResult<Document> listByProject(
      Long projectId, Integer page, Integer pageSize, Long userId) {
    log.warn("STUB IMPLEMENTATION: listByProject is not implemented.");
    // TODO: Implement logic to list documents in a project with pagination and permission checks.
    return PageResult.empty();
  }

  @Override
  public List<Document> listByProject(Long projectId, Long userId) {
    log.warn("STUB IMPLEMENTATION: listByProject (no-pagination) is not implemented.");
    // TODO: Implement logic to list all documents in a project with permission checks.
    return Collections.emptyList();
  }

  @Override
  public List<Document> listByCreator(Long creatorId, Long userId) {
    log.warn("STUB IMPLEMENTATION: listByCreator is not implemented.");
    // TODO: Implement logic to list documents by a specific creator with permission checks.
    return Collections.emptyList();
  }

  @Override
  public Document createDocument(Long projectId, CreateDocumentRequest request, Long creatorId) {
    log.warn("STUB IMPLEMENTATION: createDocument is not implemented.");
    // TODO: Implement logic for creating a document entity from a request DTO.
    return null;
  }

  @Override
  public Document updateDocument(Long documentId, UpdateDocumentRequest request, Long updaterId) {
    log.warn("STUB IMPLEMENTATION: updateDocument is not implemented.");
    // TODO: Implement logic for updating a document entity from a request DTO.
    return null;
  }

  @Override
  public void deleteDocument(Long documentId, Long deleterId) {
    log.warn("STUB IMPLEMENTATION: deleteDocument is not implemented.");
    // TODO: Implement logic for deleting a document.
  }

  @Override
  public Long create(Document document) {
    log.warn("STUB IMPLEMENTATION: create is not implemented.");
    // TODO: Implement logic for creating a document from an entity.
    return null;
  }

  @Override
  public void update(Long id, Document document, String changeLog) {
    log.warn("STUB IMPLEMENTATION: update is not implemented.");
    // TODO: Implement logic for updating a document from an entity.
  }

  @Override
  public void delete(Long id) {
    log.warn("STUB IMPLEMENTATION: delete is not implemented.");
    // TODO: Implement logic for deleting a document.
  }

  @Override
  public int batchDelete(List<Long> ids, Long deleterId) {
    log.warn("STUB IMPLEMENTATION: batchDelete is not implemented.");
    // TODO: Implement logic for batch deleting documents.
    return 0;
  }

  @Override
  public void updateStatus(Long id, DocumentStatus status, Long updaterId) {
    log.warn("STUB IMPLEMENTATION: updateStatus is not implemented.");
    // TODO: Implement logic for updating document status.
  }

  @Override
  public List<DocumentVersion> listVersions(Long documentId, Long userId) {
    log.warn("STUB IMPLEMENTATION: listVersions is not implemented.");
    // TODO: Implement logic for listing document versions.
    return Collections.emptyList();
  }

  @Override
  public DocumentVersion getVersion(Long documentId, String version, Long userId) {
    log.warn("STUB IMPLEMENTATION: getVersion is not implemented.");
    // TODO: Implement logic for getting a specific document version.
    return null;
  }

  @Override
  public Long createVersion(DocumentVersion documentVersion, Long creatorId) {
    log.warn("STUB IMPLEMENTATION: createVersion is not implemented.");
    // TODO: Implement logic for creating a document version.
    return null;
  }

  @Override
  public Document rollbackToVersion(Long documentId, String version, Long updaterId) {
    log.warn("STUB IMPLEMENTATION: rollbackToVersion is not implemented.");
    // TODO: Implement logic for rolling back to a specific document version.
    return null;
  }

  @Override
  public int countByProject(Long projectId, Long userId) {
    log.warn("STUB IMPLEMENTATION: countByProject is not implemented.");
    // TODO: Implement logic for counting documents in a project.
    return 0;
  }

  @Override
  public int countByCreator(Long creatorId, Long userId) {
    log.warn("STUB IMPLEMENTATION: countByCreator is not implemented.");
    // TODO: Implement logic for counting documents by a creator.
    return 0;
  }

  @Override
  public PageResult<Document> listAllDocuments(
      Integer page, Integer pageSize, Long projectId, String status, String keyword) {
    log.warn("STUB IMPLEMENTATION: listAllDocuments is not implemented.");
    // TODO: Implement logic for listing all accessible documents.
    return PageResult.empty();
  }

  @Override
  public PageResult<Document> searchDocuments(DocumentSearchRequest request, Long userId) {
    log.warn("STUB IMPLEMENTATION: searchDocuments is not implemented.");
    // TODO: Implement logic for advanced document search.
    return PageResult.empty();
  }

  @Override
  public List<DocumentFolderDTO> getFolderTree(Long projectId, Long userId) {
    log.warn("STUB IMPLEMENTATION: getFolderTree is not implemented.");
    // TODO: Implement logic for getting the document folder tree.
    return Collections.emptyList();
  }

  @Override
  public int getWeeklyViewCount(Long documentId, Long userId) {
    log.warn("STUB IMPLEMENTATION: getWeeklyViewCount is not implemented.");
    // TODO: Implement logic for getting weekly view count.
    return 0;
  }

  @Override
  public void toggleFavorite(Long documentId, Long userId, boolean favorite) {
    log.warn("STUB IMPLEMENTATION: toggleFavorite is not implemented.");
    // TODO: Implement logic for toggling document favorite status.
  }

  @Override
  public int getFavoriteCount(Long documentId, Long userId) {
    log.warn("STUB IMPLEMENTATION: getFavoriteCount is not implemented.");
    // TODO: Implement logic for getting document favorite count.
    return 0;
  }

  @Override
  public boolean isFavorited(Long documentId, Long userId) {
    log.warn("STUB IMPLEMENTATION: isFavorited is not implemented.");
    // TODO: Implement logic for checking if a document is favorited.
    return false;
  }

  @Override
  public Map<Long, String> getProjectNames(List<Long> projectIds, Long userId) {
    log.warn("STUB IMPLEMENTATION: getProjectNames is not implemented.");
    // TODO: Implement logic for getting project names by IDs.
    return Collections.emptyMap();
  }

  @Override
  public Document upload(DocumentUploadRequest request, Long uploaderId) throws IOException {
    log.warn(
        "STUB IMPLEMENTATION: upload (service DTO) is not implemented. Delegating to documentFileService.");
    // This is a pre-existing method signature, we delegate it to maintain compatibility.
    return documentFileService.upload(request, uploaderId);
  }

  @Override
  public DocumentDownloadInfo getDownloadInfo(Long id, Long userId) {
    log.warn("STUB IMPLEMENTATION: getDownloadInfo is not implemented.");
    // TODO: Implement logic for getting document download info.
    return null;
  }

  @Override
  @Deprecated
  public void downloadDocument(Long id, Long userId, HttpServletResponse response)
      throws IOException {
    log.warn("STUB IMPLEMENTATION: downloadDocument is not implemented.");
    // TODO: Implement logic for direct document download.
  }

  /**
   * 将Document实体转换为DocumentDTO
   *
   * @param document Document实体
   * @return DocumentDTO
   */
  private DocumentDTO convertToDTO(Document document) {
    if (document == null) {
      return null;
    }

    return DocumentDTO.builder()
        .id(document.getId())
        .title(document.getTitle())
        .content(document.getContent())
        .contentType(document.getContentType())
        .summary(document.getSummary())
        .type(document.getType())
        .status(document.getStatus() != null ? document.getStatus().toString() : null)
        .categoryId(document.getCategoryId())
        .projectId(document.getProjectId())
        .creatorId(document.getCreatorId())
        .updaterId(document.getUpdaterId())
        .filePath(document.getFileUrl())
        .fileName(document.getTitle())
        .fileSize(document.getFileSize())
        .fileExtension(null)
        .version(document.getCurrentVersion())
        .viewCount(document.getViewCount())
        .createTime(document.getCreateTime())
        .updateTime(document.getUpdateTime())
        .build();
  }
}
